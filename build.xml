<?xml version="1.0" encoding="utf-8"?>
<!--
* Copyright (c) 2007 Talis Information Ltd.
* Knights Court,
* Solihull Parkway,
* Birmingham Business Park,
* B37 7YB,
* UK
*
* This software is the confidential and proprietary information of Talis
* Information Ltd. ("Confidential Information").  You shall not
* disclose such Confidential Information and shall use it only in
* accordance with the terms of the license agreement you entered into
* with Talis.
*
*
* Author: Sam Tunnicliffe
-->
<project basedir="." default="usage" name="LuceneAnalyzers">
	  <property file="./version.properties"/>
	   
	  <!-- Pickup properties set by hudson build server -->
	  <property environment="env" />

	
	<property name="name" value="talis-lucene-analyzers" />
	<property name="version" value="1.0.1" />
	<property name="build" value="./build" />
	<property name="build.app" value="${build}/app" />
	<property name="build.tests" value="${build}/tests" />
  <property name="build.cobertura" value="${build}/cobertura"/>

	<!-- Documentation and reports -->
	<property name="build.docs" value="${build}/doc" />
	<property name="reports.junit" value="${build.docs}/reports/junit" />
	  <property name="build.javadoc" value="${build.docs}/api"/>
	  <property name="reports.junit" value="${build.docs}/reports/junit"/>
	  <property name="reports.cobertura" value="${build.docs}/reports/cobertura"/>
	  <property name="cobertura.xml" value="${reports.cobertura}/xml"/>
	  <property name="cobertura.html" value="${reports.cobertura}/html"/>

	  <property name="build.dist" value="${build}/dist"/>
	  <property name="build.dist.lib" value="${build}/dist/lib"/>
	  <property name="dist" value="./dist"/>

	<property name="build.dist" value="${build}/dist" />
	<property name="build.dist.lib" value="${build}/dist/lib" />
	<property name="dist" value="./dist" />

	<property name="dependencies" value="./dependencies" />
	<property name="junit4.lib" value="${dependencies}/JUnit-4.1" />
	<property name="lucene.lib" value="${dependencies}/lucene-2.1.0" />
	<property name="cobertura-1.8.lib" value="${dependencies}/cobertura-1.8"/>
    <property name="svnant.lib" value="${dependencies}/svnant-1.0.0"/>


	<!-- Src folders -->
	<property name="src" value="./src" />
	<property name="test.data" value="./test/data" />
	<property name="test" value="./test" />
	<property name="test.src" value="${test}/src" />
	
	<!-- libs required for build -->
	<path id="required.libs">
		<fileset dir="${lucene.lib}">
			<include name="lucene-*.jar" />
		</fileset>
	</path>

	<!-- Project Classpath -->
	<path id="project.classpath">
		<pathelement location="${build.app}" />
		<pathelement location="${build.tests}" />
		<path refid="required.libs" />
	</path>

	<!-- Test Classpath -->
	<path id="test.classpath">
		<path refid="project.classpath" />
		<fileset dir="${junit4.lib}">
			<include name="*.jar" />
		</fileset>
	</path>
	
	  <!-- Cobertura classpath -->
		  <path id="cobertura.classpath">
		    <pathelement location="${build.cobertura}"/>
		    <fileset dir="${cobertura-1.8.lib}">
		      <include name="cobertura.jar"/>
		      <include name="lib/**/*.jar"/>
		    </fileset>
		  	<path refid="test.classpath"/>
		  </path>

	  <!-- SvnAnt classpath -->
	  <path id="svnant.classpath">
	    <fileset dir="${svnant.lib}">
	      <include name="*.jar"/>
	    </fileset>
	  </path>


	<target name="usage">
		<echo message="Run ant make-dist to compile, run tests, produce reports etc" />
		<echo message="Run ant make-release to build a new distro, and import it to the /distributions folder in svn" />
		<echo message="  (Note: to do this, you must have an up-to-date working copy i.e. you need to svn ci any outstanding mods, and the run svn up." />
		<echo message="  you can test whether your working copy is up-to-date by running 'svnversion' - its output should be a single number, no alpha chars etc)" />
		<echo message="To make Release Candidate distros, which you can extern to from other projects while working on story branches run" />
		<echo message="  make-release -Drc.number=1" />
		<echo message="Don't forget to update the minor.version in version.properties before you commit a new release (not an RC)" />
	</target>

	<!-- Initialise the variables and directories that are to be used throughout the script. -->
	<target name="init">
		<mkdir dir="${build}" />
		<tstamp>
			<format property="build.datetime" pattern="yyyy-MM-dd'T'HH:mm:ssZ" />
			<format property="build.datetime.filename" pattern="yyyy_MM_dd'T'HH_mm_ss" />
		</tstamp>
		<echo message="Fetching repository version from SVN" />
		<exec executable="svnversion" spawn="false" dir="." outputproperty="repository.version">
			<arg line="." />
		</exec>
		<echo message="${repository.version}"/>
		<echo message="safe.repository.version=${repository.version}" file="${build}/svn" />
		<echo message="Escaping repository version with regex" />
		<replaceregexp file="${build}/svn" match=":" replace="~" byline="true" />
		<mkdir dir="${build.dist}" />
	</target>

	<!-- Clean up any temporary files used for the build process -->
	<target name="clean">
		<delete includeEmptyDirs="true" quiet="true">
			<fileset dir="${build}" />
		</delete>
	</target>

	<!-- Set the property that we'll use to build the version file when
        the build is a manual one (we can tell because if this is an 
        automated build under cruise control, ${label} will be set 
        with the build number) 
  -->
	<!--target name="set-manual-build-label" unless="label" depends="init">
		<property file="${build}/svn" />
		<echo message="${safe.repository.version}" />
		<property name="build.label" value="${release.version} Development Build (Revision: ${repository.version}  Build Date: ${build.datetime} Build User: ${user.name} Build OS: ${os.name} ${os.version})" />
		<property name="build.filename.suffix" value="dev-${release.version}-${safe.repository.version}-${build.datetime.filename}-${user.name}" />
		<echo message="${build.filename.suffix}" />
	</target-->
	
	  <!-- Set the property that we'll use to build the version file when
	        the build is a dev one -->
	  <target name="set-dev-build-label" unless="is.release" depends="init">
	      <property file="${build}/svn"/>
	      <echo message="${safe.repository.version}"/>
	      <property name="build.label" value="${major.version}.${minor.version} Development Build (Revision: ${repository.version}  Build Date: ${build.datetime} Build User: ${user.name} Build OS: ${os.name} ${os.version})"/>
	      <property name="build.filename.suffix" value="dev-${major.version}.${major.version}-${safe.repository.version}-${build.datetime.filename}-${user.name}"/>
	  	  <echo message="Set build label to ${build.label}"/>
	   </target>


	<!-- Set the property that we'll use to build the version file when
        the build is a manual one (we can tell because if this is an 
        automated build under cruise control, ${label} will be set 
        with the build number). In this case, we need to write the
        label out to a temp file in order to strip the "build." off
        the front of it
   -->
	
	   <!-- Set the property that we'll use to build the version file when
	        the build is for a new release -->
	   
	   <target name="set-release-build-label" depends="init">
	      <property name="is.release" value="true"/>
	      <property file="${build}/svn"/>
       <echo message="safe.repository.version=${repository.version}" file="${build}/svn"/>

	      <!-- if the rc.number property is set, append it to the label and file suffix-->
	   	  <condition property="build.label" value="${major.version}.${minor.version}.rc${rc.number}">
	   	    <isset property="rc.number"/>
	   	  </condition>	   	
	      <condition property="build.filename.suffix" value="${major.version}.${minor.version}.rc${rc.number}">
         <isset property="rc.number"/>
       </condition>
	    
	      <!-- if the rc.number was not set, then append the svn repo version to the label and suffix-->
	      <property name="build.label" value="${major.version}.${minor.version}.${repository.version}"/>
       <property name="build.filename.suffix" value="${major.version}.${minor.version}.${safe.repository.version}"/>
	   	  	   	  
	   	  <echo message="Set build label to ${build.label}"/>
	    </target>



	<!-- Compile all application classes -->
	<target name="compile-app" depends="init">
		<echo message="Compiling app code" />
		<mkdir dir="${build.app}" />
		<javac srcdir="${src}" destdir="${build.app}" encoding="UTF-8" optimize="on" debug="on" deprecation="on">
			<classpath refid="project.classpath" />
		</javac>
	</target>

	<!-- Compile all the unit tests -->
	<target name="compile-tests" depends="compile-app">
		<echo message="Compiling tests" />
		<mkdir dir="${build.tests}" />
		<javac srcdir="${test.src}" destdir="${build.tests}" encoding="UTF-8" optimize="on" debug="on" deprecation="on">
			<classpath refid="test.classpath" />
		</javac>
	</target>

	<!-- Pull together the test data, schema, config files etc -->
	<target name="test-setup">
		<mkdir dir="${reports.junit}" />
	</target>

	<!-- Run the unit test suite (without instrumentation) -->
	<target name="unit-tests" depends="compile-tests, test-setup">
		<mkdir dir="${reports.junit}" />
		<antcall target="run-unit-tests">
			<param name="make.junit.report" value="true" />
			<param name="junit.formatter" value="xml" />
			<param name="output.to.formatters" value="yes" />
			<reference refid="test.classpath" torefid="junit.run.classpath" />
		</antcall>
	</target>

	<!-- Run the unit test suite (with instrumentation) -->
	<target name="cobertura" depends="compile-tests, test-setup">
		<mkdir dir="${build.cobertura}" />
		<mkdir dir="${reports.cobertura}" />
		<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
		<delete file="${build.cobertura}/cobertura.ser" />

		<cobertura-instrument todir="${build.cobertura}" datafile="${build.cobertura}/cobertura.ser">
			<fileset dir="${build.app}">
				<include name="**/*.class" />
			</fileset>
		</cobertura-instrument>

		<antcall target="run-unit-tests">
			<param name="make.junit.report" value="false" />
			<param name="junit.formatter" value="brief" />
			<param name="output.to.formatters" value="no" />
			<reference refid="cobertura.classpath" torefid="junit.run.classpath" />
		</antcall>

		<cobertura-report format="html" datafile="${build.cobertura}/cobertura.ser" destdir="${cobertura.html}" srcdir="${src}" />
		<cobertura-report format="xml" datafile="${build.cobertura}/cobertura.ser" destdir="${cobertura.xml}" srcdir="${src}" />
	</target>

	<!-- Target to actually run all the unit tests -->
	<target name="run-unit-tests">
		<junit printsummary="yes" fork="yes" haltonerror="yes" haltonfailure="yes">
			<sysproperty key="file.encoding" value="UTF-8" />
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${build.cobertura}/cobertura.ser" />
			<classpath refid="junit.run.classpath" />
			<formatter type="${junit.formatter}" usefile="${make.junit.report}" />
			<batchtest haltonfailure="no" todir="${reports.junit}">
				<fileset dir="${build.tests}">
					<exclude name="**/*$*" />
					<exclude name="**/PorterStemmingNormalisedTestBase.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!-- Generate all javadoc -->
	<target name="javadoc" depends="jarfile">
		<mkdir dir="${build.javadoc}" />
		<javadoc packagenames="com.talis.*" sourcepath="${src}" defaultexcludes="yes" destdir="${build.javadoc}" author="true" version="true" use="true" windowtitle="Talis Lucene Analyzers API Documentation" classpathref="test.classpath">
			<doctitle>
				<![CDATA[<h1>Talis Lucene Analyzers API Documentation</h1>]]></doctitle>
		<bottom>
			<![CDATA[<i>Copyright &#169; 2007 Talis Information Ltd. All Rights Reserved.</i>]]></bottom>
</javadoc>
</target>

<!-- Build jar -->
<target name="jarfile" depends="compile-app">
<mkdir dir="${build.jars}" />
<jar jarfile="${build.jars}/${name}-${build.filename.suffix}.jar" basedir="${build.app}" />
</target>

<!-- make a new distribution and check it into svn -->
<!--target name="make-release" depends="make-dist"-->

	<property name="svn.repo.url" value="http://mrpotatohead.talis.local/svn-repos/Components/java/LuceneAnalyzers" />
	<property name="distro.url" value="${svn.repo.url}/dist" />

<target name="make-release" depends="set-release-build-label, make-dist">

<!-- Check that the working copy is up to date etc -->
<condition property="valid.repo.version">
	<matches pattern="^\d*$" string="${repository.version}" />
</condition>
<fail message="Invalid repo version for release ${repository.version}, make sure you check in changes and svn update" unless="valid.repo.version" />

<!-- Check that the generated label for the build is valid -->
<condition property="valid-version-number">
	<matches pattern="[0-9]*\.[0-9]*(\.[0-9]*|(\.rc[0-9]*))$" string="${build.filename.suffix}" />
</condition>
<fail message="Invalid version number for release ${build.filename.suffix}" unless="valid-version-number" />

<mkdir dir="${build.dist}/${build.filename.suffix}" />
<mkdir dir="${build.dist}/${build.filename.suffix}/lib" />
<mkdir dir="${build.dist}/${build.filename.suffix}/doc" />

<copy todir="${build.dist}/${build.filename.suffix}/doc">
	<fileset dir="${build.docs}" />
</copy>
<copy file="${build.dist}/lib/${name}-${build.filename.suffix}.jar" todir="${build.dist}/${name}-${build.filename.suffix}/lib" />

<taskdef name="svn" classpathref="svnant.classpath" classname="org.tigris.subversion.svnant.SvnTask" />
<svn>
	<import path="${build.dist}/${build.filename.suffix}" url="${distro.url}/${build.filename.suffix}" message="Imported new build" />
</svn>
</target>

<!-- Build jar -->
<target name="make-dist" depends="unit-tests, set-dev-build-label, jarfile">
<mkdir dir="${build.dist}" />
<jar jarfile="${build.dist}/${name}-${version}.jar" basedir="${build.app}" />
</target>
</project>

